 import React, { FC, useCallback, useState, useEffect } from "react";
 import { Log } from "./data/types";
 import { Messages } from "./components/MessageRoom.tsx";
 import { Input } from "./components/inputForm.tsx";
 import { createAiLog, createMyLog, scrollToBottom } from "./utils/utils.tsx";
 import { useCompleteText } from "./completeText.ts";

 const App: FC = () => {
   const [logs, setLogs] = useState<Log[]>([createAiLog("congraturation")]);
   const chatRoom: string[] = ["room1", "room2", "room3"];
   const [selectedRoom,setSelectedRoom]=useState(0);
   const completeText = useCompleteText();
   const [memory, setMemory] = useState("");

   const [shouldScrollBottom, setShouldScrollBottom] = useState(false);

   useEffect(() => {
     if (shouldScrollBottom) {
       setShouldScrollBottom(false);
       scrollToBottom();
     }
   }, [shouldScrollBottom]);

   const handleSubmit = useCallback(
     async (text: string) => {
       const sayAi = (message: string): void => {
         setLogs((prev) => [...prev, createAiLog(message)]);
         setShouldScrollBottom(true);
       };

       if (!completeText) {
         return;
       }
       const prompt = `The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.

 ${memory.trim()}
 Human: ${text}
 AI: `;
       completeText(prompt)
         .then((res) => {
           const newText = res.slice(prompt.length);
           sayAi(newText);
           setMemory((prev) => `${prev}AI: ${newText.trim()}\n`);
           console.log(logs);
         })
         .catch(() => {
           setLogs((prev) => [
             ...prev,
             createAiLog("エラーが発生しました。もう一度お試しください。"),
           ]);
           setShouldScrollBottom(true);
         });

       setLogs((prev) => [...prev, createMyLog(text)]);
       setMemory((prev) => `${prev}Human: ${text}\n`);
       setShouldScrollBottom(true);
     },
     [completeText, memory]
   );

   return (
     <div className="w-full min-h-screen h-full flex bg-[#d3d3d3]">
       {/* 左側のタブ */}
       <div className="w-1/8 min-h-screen bg-white shadow-md">
         <ul className="p-5 list-none">
           {chatRoom.map((room, index) => (
             <li
               key={index}
               onClick={() => setSelectedRoom(index)}
               className={`mb-4 text-lg cursor-pointer ${
                 index === selectedRoom
                   ? "text-blue-500 font-bold border-l-4 border-blue-500 pl-2"
                   : "text-gray-700"
               }`}
             >
               {room}
             </li>
           ))}
         </ul>
       </div>

       {/* メインコンテンツ */}
       <div className="flex-1 pt-10 pb-12 px-5 max-w-[600px]">
         <Messages logs={logs} />
         <div className="w-full h-40" />
       </div>

       {/* 入力フィールド */}
       <div className="fixed bottom-0 left-0 w-full h-40 flex justify-center items-center bg-transparent ">
         <Input onSubmit={handleSubmit} />
       </div>
     </div>
   );
 };

 export default App;